name: CI

on:
  pull_request:

jobs:
  sqlite-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Build and run tests
        run: |
         python --version
         python -m pip install -r requirements.txt
         python -m pytest . -v --junitxml=tmp/report.xml
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: tmp/report.xml
          check_name: sqlite3 report

  postgresql-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - uses: ikalnytskyi/action-setup-postgres@v4
        id: postgres
      - name:  Build and run tests
        run: |
         python --version
         python -m pip install -r requirements.txt
         export ATASKQ_CONNECTION=${PG_CONNECTION/postgresql/pg}
         echo ATASKQ_CONNECTION $ATASKQ_CONNECTION
         python -m pytest . -v --junitxml=tmp/report.xml
        env:
          PG_CONNECTION: ${{ steps.postgres.outputs.connection-uri }}
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: tmp/report.xml
          check_name: postgres report

  restapi-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - uses: ikalnytskyi/action-setup-postgres@v4
        id: postgres
      - name:  Build and run tests
        run: |
         python --version
         python -m pip install -r requirements.txt
         export ATASKQ_SERVER_CONNECTION=${PG_CONNECTION/postgresql/pg}
         echo ATASKQ_SERVER_CONNECTION $ATASKQ_SERVER_CONNECTION
         echo ATASKQ_SERVER_TASK_PULSE_TIMEOUT_MONITOR_INTERVAL $ATASKQ_SERVER_CONNECTION
         echo ATASKQ_TASK_PULSE_TIMEOUT $ATASKQ_TASK_PULSE_TIMEOUT
         ATASKQ_SERVER_CONNECTION=${ATASKQ_SERVER_CONNECTION/postgresql/pg}
         python -m uvicorn ataskq.server.server:app --reload --port 8080 &
         python -m pytest . -v --junitxml=tmp/report.xml
        env:
          PG_CONNECTION: ${{ steps.postgres.outputs.connection-uri }}
          ATASKQ_SERVER_TASK_PULSE_TIMEOUT_MONITOR_INTERVAL: 2
          ATASKQ_TASK_PULSE_TIMEOUT: 1.5
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: tmp/report.xml
          check_name: postgres report
